setwd("git/")
data=read.csv("activity.csv")
data[1:10,]
getwd()
setwd("ReData/RepData_PeerAssessment1/")
help(read.csv)
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "a1.dat"))
unlink(temp)
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.table(unz(temp, "activity.csv"))
unlink(temp)
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
dta
data
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"), header=TRUE)
unlink(temp)
head(data)
data[,2]=as.Date(data[,2])
head(data)
table(steps)
table(data$steps)
aggregate(data$steps, by=data$date)
aggregate(data$steps, by=data$date, sum)
aggregate(data$steps, by=unique(data$date), sum)
aggregate(data$steps, by=as-list(unique(data$date)), sum)
aggregate(data$steps ~ data$date, sum)
aggregate(steps ~ date, data, sum)
help(sum)
aggregate(steps ~ date, data, sum, na.action = na.omit)
aggregates = aggregate(steps ~ date, data, sum, na.action = na.omit)
aggregates
hist(aggregates$steps)
mean(aggregates$steps)
median(aggregates$steps)
24*60/5
data$interval/5
aggregates_5 = aggregate(steps ~ interval, data, sum, na.action = na.omit)
aggregates_5
aggregates_5 = aggregate(steps ~ interval, data, mean, na.action = na.omit)
aggregates_5
plot(aggregates_5, type="l")
mm=max(aggregates_5$steps)
mm
mm=max(aggregates_5$steps, index.return=TRUE)
mm
help(max)
which.max(aggregates_5$steps)
aggegates$interval[which.max(aggregates_5$steps)]
aggregates_5$interval[which.max(aggregates_5$steps)]
which.max(aggregates_5$steps)
aggregates_5$interval
288*5
which(is.na(data[,1]))
which(is.na(data[,2]))
which(is.na(data[,3]))
index_nas=which(is.na(data$steps))
length(index_nas)
match_to_interval = match(data$interval[index_nas], aggregates_5$interval)
match_to_interval
data2=data
data2$steps[index_nas]=aggegates_5$steps[match_to_interval]
data2$steps[index_nas]=aggregates_5$steps[match_to_interval]
data2[1:10,]
aggregates2 = aggregate(steps ~ date, data2, sum, na.action = na.omit)
hist(aggregates2$steps)
mean(aggregates2$steps)
median(aggregates2$steps)
help(weekdays)
weekdays(data2$date[1:10])
data2$weekday<-weekdays(data2$date)
as.factor(data2$weekday)
data2$weekday<-as.factor(data2$weekday)
data2$weekday
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
Sys.setlocale("LC_ALL")
weekdays(data2$date[1:10])
Sys.setlocale("LC_TIME", "en_US");
Sys.setlocale("LC_TIME","English United States")
Sys.setlocale("LC_TIME", "C")
weekdays(data2$date[1:10])
data2$weekday<-weekdays(data2$date)
data2$weekday<-as.factor(data2$weekday)
data2$weekday
data2$weekday<-as.factor(data2$weekday, Levels =
c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
data2$weekday<-as.factor(data2$weekday, levels =
c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
help(as.factor)
data2$weekday<-factor(weekdays(data2$date), levels =
c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
data2$weekday
levels(data2$weekday) = c(rep("weekday", 5), rep("weekend",2))
data2$weekday
aggregates2_5 <- aggregate(steps ~ interval+weekday, data2, mean)
aggregates2_5
require(lattice)
xyplot(steps~interval,aggregates2_5 )
xyplot(steps~interval,aggregates2_5, groups=weekday )
View(data)
xyplot(steps~interval,aggregates2_5, panel=weekday )
xyplot(steps~interval|weekday,aggregates2_5 )
xyplot(steps~interval|weekday,aggregates2_5 , type="l")
xyplot(steps~interval|weekday,aggregates2_5, layout=c(1,2) )
xyplot(steps~interval|weekday,aggregates2_5, layout=c(2,1) )
xyplot(steps~interval|weekday,aggregates2_5, layout=c(1,2) )
xyplot(steps~interval|weekday,aggregates2_5, layout=c(1,2), type="l" )
xyplot(steps~interval|weekday,aggregates2_5, layout=c(1,2), type="l", ylab="Number of steps" )
title: "PA1_template.Rmd"
getwd()
sessionInfo()
